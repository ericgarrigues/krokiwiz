#!/usr/bin/env python3
import base64
import os
import zlib
from nicegui import app, ui, binding

KROKI_URL = os.environ["KROKI_URL"]
kroki_formats = ["svg", "png"]

languages = [
    "blockdiag",
    "mermaid",
    "actdiag",
    "bytefield",
    "c4plantuml",
    "d2",
    "ditaa",
    "erd",
    "dot",
    "nomnoml",
    "nwdiag",
    "packetdiag",
    "pikchr",
    "plantuml",
    "rackdiag",
    "seqdiag",
    "structurizr",
    "svgbob",
    "symbolator",
    "umlet",
    "vega",
    "vegalite",
    "wavedrom",
    "wireviz",
    "excalidraw"
]

graph_types = {
    "blockdiag": "http://blockdiag.com/en/",
    "mermaid": "https://mermaid.js.org/intro/",
    "actdiag": "http://blockdiag.com/en/actdiag/index.html",
    "bytefield": "https://bytefield-svg.deepsymmetry.org/bytefield-svg/1.8.0/intro.html",
    "c4plantuml": "https://github.com/plantuml-stdlib/C4-PlantUML?tab=readme-ov-file#now-lets-create-a-c4-container-diagram",
    "d2": "https://d2lang.com/",
    "ditaa": "https://ditaa.sourceforge.net/",
    "erd": "",
    "graphviz": "https://graphviz.org/documentation/",
    "nomnoml": "https://nomnoml.com/",
    "nwdiag": "http://blockdiag.com/en/nwdiag/nwdiag-examples.html",
    "packetdiag": "http://blockdiag.com/en/nwdiag/packetdiag-examples.html",
    "pikchr": "https://pikchr.org/home/doc/trunk/homepage.md",
    "plantuml": "https://plantuml.com/fr/",
    "rackdiag": "http://blockdiag.com/en/nwdiag/rackdiag-examples.html",
    "seqdiag": "http://blockdiag.com/en/seqdiag/index.html",
    "structurizr": "https://docs.structurizr.com/dsl/example",
    "svgbob": "https://ivanceras.github.io/content/Svgbob/Specification.html",
    "symbolator": "https://kevinpt.github.io/symbolator/",
    "umlet": "",
    "vega": "https://vega.github.io/vega/examples/",
    "vegalite": "https://vega.github.io/vega-lite/examples/",
    "wavedrom": "https://wavedrom.com/tutorial.html",
    "wireviz": "https://github.com/wireviz/WireViz",
    "excalidraw": "https://docs.excalidraw.com/docs/codebase/json-schema"
    }


class SelectedLanguage:
    lang = number = binding.BindableProperty()

    def __init__(self):
        self.lang = "blockdiag"
        self.url = f"Documentation : [**CTRL** + {self.lang}]({graph_types[self.lang]})"


selected_language = SelectedLanguage()

@ui.page("/")
def index():
    graph_type = None

    def change_lang():
        lang = None
        if graph_type:
            lang = graph_type.value
        else:
            if 'selected_lang' in app.storage.user:
                lang = app.storage.user.get('selected_lang')
            else:
                lang = 'blockdiag'

        if lang and graph_types[lang] != "":
            url = f"Documentation : [**CTRL** + {lang}]({graph_types[lang]})"
        else:
            url = f"**{lang}**"

        selected_language.__setattr__('url', url)

    def get_graph_url():
        url = ""
        encoded_text = base64.urlsafe_b64encode(
            zlib.compress(graph_definition.value.encode("utf-8"), 9)
        ).decode("ascii")
        url = f"{KROKI_URL}/{graph_type.value}/{graph_output.value}/{encoded_text}"

        return url

    def load_image():
        result.clear()
        with result, ui.card().classes("w-[100%]"):
            graph_url = get_graph_url()
            ui.image(graph_url).classes("w-[100%]")
            with ui.card_section():
                ui.markdown(
                    f"**{graph_type.value}** graph generated by the text your entered"
                )

    ui.markdown("# Kroki graph generator")

    with ui.row().classes("w-full"):
        default_graph_def = """blockdiag {
                               Kroki -> generates -> "Block diagrams";
                               Kroki -> is -> "very easy!";
                             
                               Kroki [color = "greenyellow"];
                               "Block diagrams" [color = "pink"];
                               "very easy!" [color = "orange"];
                             }"""

        with ui.card().classes("w-[49%]") as generator:
            ui.markdown("### Select the graph type and output format")
            with ui.row().classes("w-full"):
                graph_type = ui.select(languages,
                                       value=languages[0],
                                       on_change=lambda: change_lang()
                                       ).bind_value(app.storage.user,
                                                    'selected_lang')
                graph_output = ui.select(kroki_formats,
                                         value=kroki_formats[0])

            graph_definition = ui.textarea(
                label="Edit graph definition",
                placeholder=default_graph_def,
                value=default_graph_def,
            ).classes("w-full").bind_value(app.storage.user, 'graph_text')

            ui.button("Generate", on_click=lambda: load_image())

            ui.markdown().bind_content(selected_language, 'url')

        with ui.card().classes("w-[49%]") as result:
            graph_url = get_graph_url()
            ui.image(graph_url).classes("w-[100%]")
            with ui.card_section():
                ui.markdown(
                    f"**{graph_type.value}** generated kroki"
                )

    ui.markdown('**[Kroki exemples](https://kroki.io/examples.html)**')

ui.run(title="Krokiwiz", favicon="ðŸ”®", storage_secret='toh1Ib3quuash7joh2veizae2thuaciengu6ohPaef8ziavo')
