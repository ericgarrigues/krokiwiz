#!/usr/bin/env python3
import base64
import os
import zlib
from nicegui import ui

KROKI_URL = os.environ["KROKI_URL"]
kroki_formats = ["svg", "png"]

graph_types = [
    "blockdiag",
    "mermaid",
    "actdiag",
    "bytefield",
    "c4plantuml",
    "d2",
    "ditaa",
    "erd",
    "graphviz",
    "dot",
    "nomnoml",
    "nwdiag",
    "packetdiag",
    "pikchr",
    "plantuml",
    "rackdiag",
    "seqdiag",
    "structurizr",
    "svgbob",
    "symbolator",
    "umlet",
    "vega",
    "vegalite",
    "wavedrom",
    "wireviz",
    "excalidraw",
]


def get_graph_url():
    url = ""
    encoded_text = base64.urlsafe_b64encode(
        zlib.compress(graph_definition.value.encode("utf-8"), 9)
    ).decode("ascii")
    url = f"{KROKI_URL}/{graph_type.value}/{graph_output.value}/{encoded_text}"

    return url


def load_image():
    result.clear()
    with result, ui.card().classes("w-[100%]"):
        graph_url = get_graph_url()
        ui.image(graph_url).classes("w-[100%]")
        with ui.card_section():
            ui.markdown(
                f"**{graph_type.value}** graph generated by the text your entered"
            )


ui.markdown("# Kroki graph generator")

with ui.row().classes("w-full"):
    default_graph_def = """blockdiag {
                           Kroki -> generates -> "Block diagrams";
                           Kroki -> is -> "very easy!";
                         
                           Kroki [color = "greenyellow"];
                           "Block diagrams" [color = "pink"];
                           "very easy!" [color = "orange"];
                         }"""

    with ui.card().classes("w-[49%]") as generator:
        ui.markdown("### Select the graph type and output format")
        with ui.row().classes("w-full"):
            graph_type = ui.select(graph_types, value=graph_types[0])
            graph_output = ui.select(kroki_formats, value=kroki_formats[0])

        graph_definition = ui.textarea(
            label="Edit graph definition",
            placeholder=default_graph_def,
            value=default_graph_def,
        ).classes("w-full")

        ui.button("Generate", on_click=lambda: load_image())

    with ui.card().classes("w-[49%]") as result:
        graph_url = get_graph_url()
        ui.image(graph_url).classes("w-[100%]")
        with ui.card_section():
            ui.markdown(
                f"**{graph_type.value}** graph generated by the text your entered"
            )

ui.run(title="Krokiwiz", favicon='ðŸ”®')
